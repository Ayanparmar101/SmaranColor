[vite] connecting...
[vite] connected.
Error: 
Error {}

Error: 
Error {}
message: "Invalid file format. Supported formats: ['flac', 'm4a', 'mp3', 'mp4', 'mpeg', 'mpga', 'oga', 'ogg', 'wav', 'webm']"
stack: "Error: Invalid file format. Supported formats: ['flac', 'm4a', 'mp3', 'mp4', 'mpeg', 'mpga', 'oga', 'ogg', 'wav', 'webm']↵ at stopListening (https://aad6c047-9c0e-4690-b1d6-85e2e9170ffb-00-25bzejnl1o375.sisko.replit.dev/src/pages/VoiceBotPage.tsx?t=1742026941742:129:27)"
get stack: ƒ ()
length: 0
name: ""
[[Prototype]]: ƒ ()
apply: ƒ apply()
arguments: "'caller', 'callee', and 'arguments' properties may not be accessed on strict mode functions or the arguments objects for calls to them"
get arguments: ƒ ()
set arguments: ƒ ()
bind: ƒ bind()
call: ƒ call()
caller: "'caller', 'callee', and 'arguments' properties may not be accessed on strict mode functions or the arguments objects for calls to them"
get caller: ƒ ()
set caller: ƒ ()
constructor: ƒ Function()
length: 1
name: ""
toString: ƒ toString()
Symbol(Symbol.hasInstance): undefined
[[Prototype]]: Object
set stack: ƒ ()
length: 1
name: ""
[[Prototype]]: ƒ ()
[[Prototype]]: Object
constructor: ƒ Error()
stackTraceLimit: 10
captureStackTrace: ƒ captureStackTrace()
length: 2
name: "captureStackTrace"
[[Prototype]]: ƒ ()
isError: ƒ isError()
length: 1
name: "isError"
[[Prototype]]: ƒ ()
length: 1
name: "Error"
prototype: Object
constructor: ƒ Error()
message: "Invalid file format. Supported formats: ['flac', 'm4a', 'mp3', 'mp4', 'mpeg', 'mpga', 'oga', 'ogg', 'wav', 'webm']"
name: "Error"
toString: ƒ toString()
[[Prototype]]: Object
[[Prototype]]: ƒ ()
apply: ƒ apply()
arguments: "'caller', 'callee', and 'arguments' properties may not be accessed on strict mode functions or the arguments objects for calls to them"
get arguments: ƒ ()
set arguments: ƒ ()
bind: ƒ bind()
call: ƒ call()
caller: "'caller', 'callee', and 'arguments' properties may not be accessed on strict mode functions or the arguments objects for calls to them"
get caller: ƒ ()
length: 0
name: ""
[[Prototype]]: ƒ ()
set caller: ƒ ()
length: 0
name: ""
[[Prototype]]: ƒ ()
constructor: ƒ Function()
length: 1
name: ""
toString: ƒ toString()
length: 0
name: "toString"
[[Prototype]]: ƒ ()
Symbol(Symbol.hasInstance): undefined
[[Prototype]]: Object
constructor: ƒ Error()
hasOwnProperty: ƒ hasOwnProperty()
isPrototypeOf: ƒ isPrototypeOf()
propertyIsEnumerable: ƒ propertyIsEnumerable()
toLocaleString: ƒ toLocaleString()
toString: ƒ toString()
valueOf: ƒ valueOf()
__defineGetter__: ƒ __defineGetter__()
__defineSetter__: ƒ __defineSetter__()
__lookupGetter__: ƒ __lookupGetter__()
__lookupSetter__: ƒ __lookupSetter__()
__proto__: Object
get __proto__: ƒ get __proto__()
set __proto__: ƒ set __proto__()
message: "Invalid file format. Supported formats: ['flac', 'm4a', 'mp3', 'mp4', 'mpeg', 'mpga', 'oga', 'ogg', 'wav', 'webm']"
name: "Error"
toString: ƒ toString()
length: 0
name: "toString"
[[Prototype]]: ƒ ()
apply: ƒ apply()
arguments: "'caller', 'callee', and 'arguments' properties may not be accessed on strict mode functions or the arguments objects for calls to them"
get arguments: ƒ ()
set arguments: ƒ ()
bind: ƒ bind()
call: ƒ call()
caller: "'caller', 'callee', and 'arguments' properties may not be accessed on strict mode functions or the arguments objects for calls to them"
get caller: ƒ ()
set caller: ƒ ()
constructor: ƒ Function()
length: 1
name: ""
toString: ƒ toString()
Symbol(Symbol.hasInstance): undefined
[[Prototype]]: Object
[[Prototype]]: Object
constructor: ƒ Error()
hasOwnProperty: ƒ hasOwnProperty()
isPrototypeOf: ƒ isPrototypeOf()
propertyIsEnumerable: ƒ propertyIsEnumerable()
toLocaleString: ƒ toLocaleString()
toString: ƒ toString()
valueOf: ƒ valueOf()
__defineGetter__: ƒ __defineGetter__()
__defineSetter__: ƒ __defineSetter__()
__lookupGetter__: ƒ __lookupGetter__()
__lookupSetter__: ƒ __lookupSetter__()
__proto__: Object
get __proto__: ƒ get __proto__()
set __proto__: ƒ set __proto__()
