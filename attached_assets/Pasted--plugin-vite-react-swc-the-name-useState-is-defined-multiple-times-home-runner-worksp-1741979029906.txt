[plugin:vite:react-swc] × the name `useState` is defined multiple times
     ╭─[/home/runner/workspace/src/pages/FlashcardsPage.tsx:2:1]
   1 │ 
   2 │ import React, { useState } from 'react';
     ·                 ────┬───
     ·                     ╰── previous definition of `useState` here
   3 │ import { NavBar } from '@/components/NavBar';
   4 │ import { Footer } from '@/components/Footer';
   5 │ import { FileText, Upload, HelpCircle } from 'lucide-react';
   6 │ import { cn } from '@/lib/utils';
   7 │ import { toast } from 'sonner';
   8 │ 
   9 │ const FlashcardsPage = () => {
  10 │   const [pdfFile, setPdfFile] = useState<File | null>(null);
  11 │   const [flashcards, setFlashcards] = useState<Array<{question: string, answer: string}>>([]);
  12 │   const [loading, setLoading] = useState(false);
  13 │ 
  14 │   const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
  15 │     const file = e.target.files?.[0];
  16 │     if (file && file.type === 'application/pdf') {
  17 │       setPdfFile(file);
  18 │     } else {
  19 │       toast.error('Please upload a PDF file');
  20 │     }
  21 │   };
  22 │ 
  23 │   const handleSubmit = async (e: React.FormEvent) => {
  24 │     e.preventDefault();
  25 │     if (!pdfFile) {
  26 │       toast.error('Please select a PDF file first');
  27 │       return;
  28 │     }
  29 │ 
  30 │     setLoading(true);
  31 │     try {
  32 │       const formData = new FormData();
  33 │       formData.append('pdf', pdfFile);
  34 │       
  35 │       // TODO: Implement API endpoint for PDF processing
  36 │       const response = await fetch('/api/generate-flashcards', {
  37 │         method: 'POST',
  38 │         body: formData
  39 │       });
  40 │       
  41 │       const data = await response.json();
  42 │       setFlashcards(data.flashcards);
  43 │       toast.success('Flashcards generated successfully!');
  44 │     } catch (error) {
  45 │       console.error('Error generating flashcards:', error);
  46 │       toast.error('Failed to generate flashcards');
  47 │     } finally {
  48 │       setLoading(false);
  49 │     }
  50 │   };
  51 │ 
  52 │   return (
  53 │     <div className="min-h-screen flex flex-col">
  54 │       <NavBar />
  55 │       
  56 │       <main className="flex-1">
  57 │         <div className="page-container">
  58 │           <div className="flex flex-col md:flex-row items-start gap-6 mb-8">
  59 │             <div className="md:w-3/5">
  60 │               <h1 className="text-3xl md:text-4xl font-bold mb-2">
  61 │                 <span className="flex items-center gap-2">
  62 │                   <FileText className="text-kid-blue" />
  63 │                   PDF Flashcard Generator
  64 │                 </span>
  65 │               </h1>
  66 │               <p className="text-gray-700 mb-4">
  67 │                 Upload a PDF and get AI-generated flashcards to help you study and memorize the content effectively.
  68 │               </p>
  69 │             </div>
  70 │             <div className="md:w-2/5 bg-kid-blue/10 p-4 rounded-xl border border-kid-blue/20">
  71 │               <div className="flex items-start gap-2">
  72 │                 <HelpCircle className="text-kid-blue mt-1 flex-shrink-0" />
  73 │                 <div>
  74 │                   <h3 className="font-medium text-kid-blue">How it works:</h3>
  75 │                   <p className="text-sm text-gray-600">
  76 │                     Upload your PDF study material, and our AI will analyze it to create targeted flashcards for better learning.
  77 │                   </p>
  78 │                 </div>
  79 │               </div>
  80 │             </div>
  81 │           </div>
  82 │ 
  83 │           <div className="grid md:grid-cols-2 gap-8">
  84 │             <div>
  85 │               <div className="bg-white rounded-xl shadow-sm border p-6">
  86 │                 <form onSubmit={handleSubmit}>
  87 │                   <div className="flex flex-col items-center justify-center border-2 border-dashed border-gray-300 rounded-lg p-8 mb-4">
  88 │                     <Upload className="w-12 h-12 text-gray-400 mb-4" />
  89 │                     <input
  90 │                       type="file"
  91 │                       accept=".pdf"
  92 │                       onChange={handleFileChange}
  93 │                       className="hidden"
  94 │                       id="pdf-upload"
  95 │                     />
  96 │                     <label
  97 │                       htmlFor="pdf-upload"
  98 │                       className="cursor-pointer text-center"
  99 │                     >
 100 │                       <span className="text-kid-blue font-medium">Click to upload</span>
 101 │                       <span className="text-gray-500"> or drag and drop</span>
 102 │                       <p className="text-sm text-gray-500">PDF (max. 10MB)</p>
 103 │                     </label>
 104 │                   </div>
 105 │                   {pdfFile && (
 106 │                     <p className="text-sm text-gray-600 mb-4">
 107 │                       Selected file: {pdfFile.name}
 108 │                     </p>
 109 │                   )}
 110 │                   <button
 111 │                     type="submit"
 112 │                     disabled={!pdfFile || loading}
 113 │                     className={cn(
 114 │                       "w-full py-2 px-4 rounded-lg font-medium transition-colors",
 115 │                       "bg-kid-blue text-white hover:bg-kid-blue/90",
 116 │                       "disabled:bg-gray-300 disabled:cursor-not-allowed"
 117 │                     )}
 118 │                   >
 119 │                     {loading ? 'Generating...' : 'Generate Flashcards'}
 120 │                   </button>
 121 │                 </form>
 122 │               </div>
 123 │             </div>
 124 │ 
 125 │             <div>
 126 │               <div className="bg-white rounded-xl shadow-sm border p-6 h-full">
 127 │                 <h2 className="text-xl font-semibold mb-4">Your Flashcards</h2>
 128 │                 {flashcards.length > 0 ? (
 129 │                   <div className="space-y-4">
 130 │                     {flashcards.map((card, index) => (
 131 │                       <div
 132 │                         key={index}
 133 │                         className="border rounded-lg p-4 hover:shadow-md transition-shadow"
 134 │                       >
 135 │                         <h3 className="font-medium mb-2">Question {index + 1}:</h3>
 136 │                         <p className="text-gray-700 mb-3">{card.question}</p>
 137 │                         <h3 className="font-medium mb-2">Answer:</h3>
 138 │                         <p className="text-gray-700">{card.answer}</p>
 139 │                       </div>
 140 │                     ))}
 141 │                   </div>
 142 │                 ) : (
 143 │                   <p className="text-gray-500 text-center py-8">
 144 │                     Generated flashcards will appear here
 145 │                   </p>
 146 │                 )}
 147 │               </div>
 148 │             </div>
 149 │           </div>
 150 │         </div>
 151 │       </main>
 152 │       
 153 │       <Footer />
 154 │     </div>
 155 │   );
 156 │ };
 157 │ 
 158 │ export default FlashcardsPage;
 159 │ import React, { useState } from 'react';
     ·                 ────┬───
     ·                     ╰── `useState` redefined here
 160 │ import { FileText } from 'lucide-react';
 161 │ import NavBar from '@/components/NavBar';
 162 │ import Footer from '@/components/Footer';
     ╰────
  × the name `FileText` is defined multiple times
     ╭─[/home/runner/workspace/src/pages/FlashcardsPage.tsx:5:1]
   2 │ import React, { useState } from 'react';
   3 │ import { NavBar } from '@/components/NavBar';
   4 │ import { Footer } from '@/components/Footer';
   5 │ import { FileText, Upload, HelpCircle } from 'lucide-react';
     ·          ────┬───
     ·              ╰── previous definition of `FileText` here
   6 │ import { cn } from '@/lib/utils';
   7 │ import { toast } from 'sonner';
   8 │ 
   9 │ const FlashcardsPage = () => {
  10 │   const [pdfFile, setPdfFile] = useState<File | null>(null);
  11 │   const [flashcards, setFlashcards] = useState<Array<{question: string, answer: string}>>([]);
  12 │   const [loading, setLoading] = useState(false);
  13 │ 
  14 │   const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
  15 │     const file = e.target.files?.[0];
  16 │     if (file && file.type === 'application/pdf') {
  17 │       setPdfFile(file);
  18 │     } else {
  19 │       toast.error('Please upload a PDF file');
  20 │     }
  21 │   };
  22 │ 
  23 │   const handleSubmit = async (e: React.FormEvent) => {
  24 │     e.preventDefault();
  25 │     if (!pdfFile) {
  26 │       toast.error('Please select a PDF file first');
  27 │       return;
  28 │     }
  29 │ 
  30 │     setLoading(true);
  31 │     try {
  32 │       const formData = new FormData();
  33 │       formData.append('pdf', pdfFile);
  34 │       
  35 │       // TODO: Implement API endpoint for PDF processing
  36 │       const response = await fetch('/api/generate-flashcards', {
  37 │         method: 'POST',
  38 │         body: formData
  39 │       });
  40 │       
  41 │       const data = await response.json();
  42 │       setFlashcards(data.flashcards);
  43 │       toast.success('Flashcards generated successfully!');
  44 │     } catch (error) {
  45 │       console.error('Error generating flashcards:', error);
  46 │       toast.error('Failed to generate flashcards');
  47 │     } finally {
  48 │       setLoading(false);
  49 │     }
  50 │   };
  51 │ 
  52 │   return (
  53 │     <div className="min-h-screen flex flex-col">
  54 │       <NavBar />
  55 │       
  56 │       <main className="flex-1">
  57 │         <div className="page-container">
  58 │           <div className="flex flex-col md:flex-row items-start gap-6 mb-8">
  59 │             <div className="md:w-3/5">
  60 │               <h1 className="text-3xl md:text-4xl font-bold mb-2">
  61 │                 <span className="flex items-center gap-2">
  62 │                   <FileText className="text-kid-blue" />
  63 │                   PDF Flashcard Generator
  64 │                 </span>
  65 │               </h1>
  66 │               <p className="text-gray-700 mb-4">
  67 │                 Upload a PDF and get AI-generated flashcards to help you study and memorize the content effectively.
  68 │               </p>
  69 │             </div>
  70 │             <div className="md:w-2/5 bg-kid-blue/10 p-4 rounded-xl border border-kid-blue/20">
  71 │               <div className="flex items-start gap-2">
  72 │                 <HelpCircle className="text-kid-blue mt-1 flex-shrink-0" />
  73 │                 <div>
  74 │                   <h3 className="font-medium text-kid-blue">How it works:</h3>
  75 │                   <p className="text-sm text-gray-600">
  76 │                     Upload your PDF study material, and our AI will analyze it to create targeted flashcards for better learning.
  77 │                   </p>
  78 │                 </div>
  79 │               </div>
  80 │             </div>
  81 │           </div>
  82 │ 
  83 │           <div className="grid md:grid-cols-2 gap-8">
  84 │             <div>
  85 │               <div className="bg-white rounded-xl shadow-sm border p-6">
  86 │                 <form onSubmit={handleSubmit}>
  87 │                   <div className="flex flex-col items-center justify-center border-2 border-dashed border-gray-300 rounded-lg p-8 mb-4">
  88 │                     <Upload className="w-12 h-12 text-gray-400 mb-4" />
  89 │                     <input
  90 │                       type="file"
  91 │                       accept=".pdf"
  92 │                       onChange={handleFileChange}
  93 │                       className="hidden"
  94 │                       id="pdf-upload"
  95 │                     />
  96 │                     <label
  97 │                       htmlFor="pdf-upload"
  98 │                       className="cursor-pointer text-center"
  99 │                     >
 100 │                       <span className="text-kid-blue font-medium">Click to upload</span>
 101 │                       <span className="text-gray-500"> or drag and drop</span>
 102 │                       <p className="text-sm text-gray-500">PDF (max. 10MB)</p>
 103 │                     </label>
 104 │                   </div>
 105 │                   {pdfFile && (
 106 │                     <p className="text-sm text-gray-600 mb-4">
 107 │                       Selected file: {pdfFile.name}
 108 │                     </p>
 109 │                   )}
 110 │                   <button
 111 │                     type="submit"
 112 │                     disabled={!pdfFile || loading}
 113 │                     className={cn(
 114 │                       "w-full py-2 px-4 rounded-lg font-medium transition-colors",
 115 │                       "bg-kid-blue text-white hover:bg-kid-blue/90",
 116 │                       "disabled:bg-gray-300 disabled:cursor-not-allowed"
 117 │                     )}
 118 │                   >
 119 │                     {loading ? 'Generating...' : 'Generate Flashcards'}
 120 │                   </button>
 121 │                 </form>
 122 │               </div>
 123 │             </div>
 124 │ 
 125 │             <div>
 126 │               <div className="bg-white rounded-xl shadow-sm border p-6 h-full">
 127 │                 <h2 className="text-xl font-semibold mb-4">Your Flashcards</h2>
 128 │                 {flashcards.length > 0 ? (
 129 │                   <div className="space-y-4">
 130 │                     {flashcards.map((card, index) => (
 131 │                       <div
 132 │                         key={index}
 133 │                         className="border rounded-lg p-4 hover:shadow-md transition-shadow"
 134 │                       >
 135 │                         <h3 className="font-medium mb-2">Question {index + 1}:</h3>
 136 │                         <p className="text-gray-700 mb-3">{card.question}</p>
 137 │                         <h3 className="font-medium mb-2">Answer:</h3>
 138 │                         <p className="text-gray-700">{card.answer}</p>
 139 │                       </div>
 140 │                     ))}
 141 │                   </div>
 142 │                 ) : (
 143 │                   <p className="text-gray-500 text-center py-8">
 144 │                     Generated flashcards will appear here
 145 │                   </p>
 146 │                 )}
 147 │               </div>
 148 │             </div>
 149 │           </div>
 150 │         </div>
 151 │       </main>
 152 │       
 153 │       <Footer />
 154 │     </div>
 155 │   );
 156 │ };
 157 │ 
 158 │ export default FlashcardsPage;
 159 │ import React, { useState } from 'react';
 160 │ import { FileText } from 'lucide-react';
     ·          ────┬───
     ·              ╰── `FileText` redefined here
 161 │ import NavBar from '@/components/NavBar';
 162 │ import Footer from '@/components/Footer';
 163 │ import { Button } from '@/components/ui/button';
     ╰────
  × the name `NavBar` is defined multiple times
     ╭─[/home/runner/workspace/src/pages/FlashcardsPage.tsx:3:1]
   1 │ 
   2 │ import React, { useState } from 'react';
   3 │ import { NavBar } from '@/components/NavBar';
     ·          ───┬──
     ·             ╰── previous definition of `NavBar` here
   4 │ import { Footer } from '@/components/Footer';
   5 │ import { FileText, Upload, HelpCircle } from 'lucide-react';
   6 │ import { cn } from '@/lib/utils';
   7 │ import { toast } from 'sonner';
   8 │ 
   9 │ const FlashcardsPage = () => {
  10 │   const [pdfFile, setPdfFile] = useState<File | null>(null);
  11 │   const [flashcards, setFlashcards] = useState<Array<{question: string, answer: string}>>([]);
  12 │   const [loading, setLoading] = useState(false);
  13 │ 
  14 │   const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
  15 │     const file = e.target.files?.[0];
  16 │     if (file && file.type === 'application/pdf') {
  17 │       setPdfFile(file);
  18 │     } else {
  19 │       toast.error('Please upload a PDF file');
  20 │     }
  21 │   };
  22 │ 
  23 │   const handleSubmit = async (e: React.FormEvent) => {
  24 │     e.preventDefault();
  25 │     if (!pdfFile) {
  26 │       toast.error('Please select a PDF file first');
  27 │       return;
  28 │     }
  29 │ 
  30 │     setLoading(true);
  31 │     try {
  32 │       const formData = new FormData();
  33 │       formData.append('pdf', pdfFile);
  34 │       
  35 │       // TODO: Implement API endpoint for PDF processing
  36 │       const response = await fetch('/api/generate-flashcards', {
  37 │         method: 'POST',
  38 │         body: formData
  39 │       });
  40 │       
  41 │       const data = await response.json();
  42 │       setFlashcards(data.flashcards);
  43 │       toast.success('Flashcards generated successfully!');
  44 │     } catch (error) {
  45 │       console.error('Error generating flashcards:', error);
  46 │       toast.error('Failed to generate flashcards');
  47 │     } finally {
  48 │       setLoading(false);
  49 │     }
  50 │   };
  51 │ 
  52 │   return (
  53 │     <div className="min-h-screen flex flex-col">
  54 │       <NavBar />
  55 │       
  56 │       <main className="flex-1">
  57 │         <div className="page-container">
  58 │           <div className="flex flex-col md:flex-row items-start gap-6 mb-8">
  59 │             <div className="md:w-3/5">
  60 │               <h1 className="text-3xl md:text-4xl font-bold mb-2">
  61 │                 <span className="flex items-center gap-2">
  62 │                   <FileText className="text-kid-blue" />
  63 │                   PDF Flashcard Generator
  64 │                 </span>
  65 │               </h1>
  66 │               <p className="text-gray-700 mb-4">
  67 │                 Upload a PDF and get AI-generated flashcards to help you study and memorize the content effectively.
  68 │               </p>
  69 │             </div>
  70 │             <div className="md:w-2/5 bg-kid-blue/10 p-4 rounded-xl border border-kid-blue/20">
  71 │               <div className="flex items-start gap-2">
  72 │                 <HelpCircle className="text-kid-blue mt-1 flex-shrink-0" />
  73 │                 <div>
  74 │                   <h3 className="font-medium text-kid-blue">How it works:</h3>
  75 │                   <p className="text-sm text-gray-600">
  76 │                     Upload your PDF study material, and our AI will analyze it to create targeted flashcards for better learning.
  77 │                   </p>
  78 │                 </div>
  79 │               </div>
  80 │             </div>
  81 │           </div>
  82 │ 
  83 │           <div className="grid md:grid-cols-2 gap-8">
  84 │             <div>
  85 │               <div className="bg-white rounded-xl shadow-sm border p-6">
  86 │                 <form onSubmit={handleSubmit}>
  87 │                   <div className="flex flex-col items-center justify-center border-2 border-dashed border-gray-300 rounded-lg p-8 mb-4">
  88 │                     <Upload className="w-12 h-12 text-gray-400 mb-4" />
  89 │                     <input
  90 │                       type="file"
  91 │                       accept=".pdf"
  92 │                       onChange={handleFileChange}
  93 │                       className="hidden"
  94 │                       id="pdf-upload"
  95 │                     />
  96 │                     <label
  97 │                       htmlFor="pdf-upload"
  98 │                       className="cursor-pointer text-center"
  99 │                     >
 100 │                       <span className="text-kid-blue font-medium">Click to upload</span>
 101 │                       <span className="text-gray-500"> or drag and drop</span>
 102 │                       <p className="text-sm text-gray-500">PDF (max. 10MB)</p>
 103 │                     </label>
 104 │                   </div>
 105 │                   {pdfFile && (
 106 │                     <p className="text-sm text-gray-600 mb-4">
 107 │                       Selected file: {pdfFile.name}
 108 │                     </p>
 109 │                   )}
 110 │                   <button
 111 │                     type="submit"
 112 │                     disabled={!pdfFile || loading}
 113 │                     className={cn(
 114 │                       "w-full py-2 px-4 rounded-lg font-medium transition-colors",
 115 │                       "bg-kid-blue text-white hover:bg-kid-blue/90",
 116 │                       "disabled:bg-gray-300 disabled:cursor-not-allowed"
 117 │                     )}
 118 │                   >
 119 │                     {loading ? 'Generating...' : 'Generate Flashcards'}
 120 │                   </button>
 121 │                 </form>
 122 │               </div>
 123 │             </div>
 124 │ 
 125 │             <div>
 126 │               <div className="bg-white rounded-xl shadow-sm border p-6 h-full">
 127 │                 <h2 className="text-xl font-semibold mb-4">Your Flashcards</h2>
 128 │                 {flashcards.length > 0 ? (
 129 │                   <div className="space-y-4">
 130 │                     {flashcards.map((card, index) => (
 131 │                       <div
 132 │                         key={index}
 133 │                         className="border rounded-lg p-4 hover:shadow-md transition-shadow"
 134 │                       >
 135 │                         <h3 className="font-medium mb-2">Question {index + 1}:</h3>
 136 │                         <p className="text-gray-700 mb-3">{card.question}</p>
 137 │                         <h3 className="font-medium mb-2">Answer:</h3>
 138 │                         <p className="text-gray-700">{card.answer}</p>
 139 │                       </div>
 140 │                     ))}
 141 │                   </div>
 142 │                 ) : (
 143 │                   <p className="text-gray-500 text-center py-8">
 144 │                     Generated flashcards will appear here
 145 │                   </p>
 146 │                 )}
 147 │               </div>
 148 │             </div>
 149 │           </div>
 150 │         </div>
 151 │       </main>
 152 │       
 153 │       <Footer />
 154 │     </div>
 155 │   );
 156 │ };
 157 │ 
 158 │ export default FlashcardsPage;
 159 │ import React, { useState } from 'react';
 160 │ import { FileText } from 'lucide-react';
 161 │ import NavBar from '@/components/NavBar';
     ·        ───┬──
     ·           ╰── `NavBar` redefined here
 162 │ import Footer from '@/components/Footer';
 163 │ import { Button } from '@/components/ui/button';
 164 │ import { Input } from '@/components/ui/input';
     ╰────
  × the name `Footer` is defined multiple times
     ╭─[/home/runner/workspace/src/pages/FlashcardsPage.tsx:4:1]
   1 │ 
   2 │ import React, { useState } from 'react';
   3 │ import { NavBar } from '@/components/NavBar';
   4 │ import { Footer } from '@/components/Footer';
     ·          ───┬──
     ·             ╰── previous definition of `Footer` here
   5 │ import { FileText, Upload, HelpCircle } from 'lucide-react';
   6 │ import { cn } from '@/lib/utils';
   7 │ import { toast } from 'sonner';
   8 │ 
   9 │ const FlashcardsPage = () => {
  10 │   const [pdfFile, setPdfFile] = useState<File | null>(null);
  11 │   const [flashcards, setFlashcards] = useState<Array<{question: string, answer: string}>>([]);
  12 │   const [loading, setLoading] = useState(false);
  13 │ 
  14 │   const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
  15 │     const file = e.target.files?.[0];
  16 │     if (file && file.type === 'application/pdf') {
  17 │       setPdfFile(file);
  18 │     } else {
  19 │       toast.error('Please upload a PDF file');
  20 │     }
  21 │   };
  22 │ 
  23 │   const handleSubmit = async (e: React.FormEvent) => {
  24 │     e.preventDefault();
  25 │     if (!pdfFile) {
  26 │       toast.error('Please select a PDF file first');
  27 │       return;
  28 │     }
  29 │ 
  30 │     setLoading(true);
  31 │     try {
  32 │       const formData = new FormData();
  33 │       formData.append('pdf', pdfFile);
  34 │       
  35 │       // TODO: Implement API endpoint for PDF processing
  36 │       const response = await fetch('/api/generate-flashcards', {
  37 │         method: 'POST',
  38 │         body: formData
  39 │       });
  40 │       
  41 │       const data = await response.json();
  42 │       setFlashcards(data.flashcards);
  43 │       toast.success('Flashcards generated successfully!');
  44 │     } catch (error) {
  45 │       console.error('Error generating flashcards:', error);
  46 │       toast.error('Failed to generate flashcards');
  47 │     } finally {
  48 │       setLoading(false);
  49 │     }
  50 │   };
  51 │ 
  52 │   return (
  53 │     <div className="min-h-screen flex flex-col">
  54 │       <NavBar />
  55 │       
  56 │       <main className="flex-1">
  57 │         <div className="page-container">
  58 │           <div className="flex flex-col md:flex-row items-start gap-6 mb-8">
  59 │             <div className="md:w-3/5">
  60 │               <h1 className="text-3xl md:text-4xl font-bold mb-2">
  61 │                 <span className="flex items-center gap-2">
  62 │                   <FileText className="text-kid-blue" />
  63 │                   PDF Flashcard Generator
  64 │                 </span>
  65 │               </h1>
  66 │               <p className="text-gray-700 mb-4">
  67 │                 Upload a PDF and get AI-generated flashcards to help you study and memorize the content effectively.
  68 │               </p>
  69 │             </div>
  70 │             <div className="md:w-2/5 bg-kid-blue/10 p-4 rounded-xl border border-kid-blue/20">
  71 │               <div className="flex items-start gap-2">
  72 │                 <HelpCircle className="text-kid-blue mt-1 flex-shrink-0" />
  73 │                 <div>
  74 │                   <h3 className="font-medium text-kid-blue">How it works:</h3>
  75 │                   <p className="text-sm text-gray-600">
  76 │                     Upload your PDF study material, and our AI will analyze it to create targeted flashcards for better learning.
  77 │                   </p>
  78 │                 </div>
  79 │               </div>
  80 │             </div>
  81 │           </div>
  82 │ 
  83 │           <div className="grid md:grid-cols-2 gap-8">
  84 │             <div>
  85 │               <div className="bg-white rounded-xl shadow-sm border p-6">
  86 │                 <form onSubmit={handleSubmit}>
  87 │                   <div className="flex flex-col items-center justify-center border-2 border-dashed border-gray-300 rounded-lg p-8 mb-4">
  88 │                     <Upload className="w-12 h-12 text-gray-400 mb-4" />
  89 │                     <input
  90 │                       type="file"
  91 │                       accept=".pdf"
  92 │                       onChange={handleFileChange}
  93 │                       className="hidden"
  94 │                       id="pdf-upload"
  95 │                     />
  96 │                     <label
  97 │                       htmlFor="pdf-upload"
  98 │                       className="cursor-pointer text-center"
  99 │                     >
 100 │                       <span className="text-kid-blue font-medium">Click to upload</span>
 101 │                       <span className="text-gray-500"> or drag and drop</span>
 102 │                       <p className="text-sm text-gray-500">PDF (max. 10MB)</p>
 103 │                     </label>
 104 │                   </div>
 105 │                   {pdfFile && (
 106 │                     <p className="text-sm text-gray-600 mb-4">
 107 │                       Selected file: {pdfFile.name}
 108 │                     </p>
 109 │                   )}
 110 │                   <button
 111 │                     type="submit"
 112 │                     disabled={!pdfFile || loading}
 113 │                     className={cn(
 114 │                       "w-full py-2 px-4 rounded-lg font-medium transition-colors",
 115 │                       "bg-kid-blue text-white hover:bg-kid-blue/90",
 116 │                       "disabled:bg-gray-300 disabled:cursor-not-allowed"
 117 │                     )}
 118 │                   >
 119 │                     {loading ? 'Generating...' : 'Generate Flashcards'}
 120 │                   </button>
 121 │                 </form>
 122 │               </div>
 123 │             </div>
 124 │ 
 125 │             <div>
 126 │               <div className="bg-white rounded-xl shadow-sm border p-6 h-full">
 127 │                 <h2 className="text-xl font-semibold mb-4">Your Flashcards</h2>
 128 │                 {flashcards.length > 0 ? (
 129 │                   <div className="space-y-4">
 130 │                     {flashcards.map((card, index) => (
 131 │                       <div
 132 │                         key={index}
 133 │                         className="border rounded-lg p-4 hover:shadow-md transition-shadow"
 134 │                       >
 135 │                         <h3 className="font-medium mb-2">Question {index + 1}:</h3>
 136 │                         <p className="text-gray-700 mb-3">{card.question}</p>
 137 │                         <h3 className="font-medium mb-2">Answer:</h3>
 138 │                         <p className="text-gray-700">{card.answer}</p>
 139 │                       </div>
 140 │                     ))}
 141 │                   </div>
 142 │                 ) : (
 143 │                   <p className="text-gray-500 text-center py-8">
 144 │                     Generated flashcards will appear here
 145 │                   </p>
 146 │                 )}
 147 │               </div>
 148 │             </div>
 149 │           </div>
 150 │         </div>
 151 │       </main>
 152 │       
 153 │       <Footer />
 154 │     </div>
 155 │   );
 156 │ };
 157 │ 
 158 │ export default FlashcardsPage;
 159 │ import React, { useState } from 'react';
 160 │ import { FileText } from 'lucide-react';
 161 │ import NavBar from '@/components/NavBar';
 162 │ import Footer from '@/components/Footer';
     ·        ───┬──
     ·           ╰── `Footer` redefined here
 163 │ import { Button } from '@/components/ui/button';
 164 │ import { Input } from '@/components/ui/input';
     ╰────
  × the name `FlashcardsPage` is defined multiple times
     ╭─[/home/runner/workspace/src/pages/FlashcardsPage.tsx:9:1]
   6 │ import { cn } from '@/lib/utils';
   7 │ import { toast } from 'sonner';
   8 │ 
   9 │ const FlashcardsPage = () => {
     ·       ───────┬──────
     ·              ╰── previous definition of `FlashcardsPage` here
  10 │   const [pdfFile, setPdfFile] = useState<File | null>(null);
  11 │   const [flashcards, setFlashcards] = useState<Array<{question: string, answer: string}>>([]);
  12 │   const [loading, setLoading] = useState(false);
  13 │ 
  14 │   const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
  15 │     const file = e.target.files?.[0];
  16 │     if (file && file.type === 'application/pdf') {
  17 │       setPdfFile(file);
  18 │     } else {
  19 │       toast.error('Please upload a PDF file');
  20 │     }
  21 │   };
  22 │ 
  23 │   const handleSubmit = async (e: React.FormEvent) => {
  24 │     e.preventDefault();
  25 │     if (!pdfFile) {
  26 │       toast.error('Please select a PDF file first');
  27 │       return;
  28 │     }
  29 │ 
  30 │     setLoading(true);
  31 │     try {
  32 │       const formData = new FormData();
  33 │       formData.append('pdf', pdfFile);
  34 │       
  35 │       // TODO: Implement API endpoint for PDF processing
  36 │       const response = await fetch('/api/generate-flashcards', {
  37 │         method: 'POST',
  38 │         body: formData
  39 │       });
  40 │       
  41 │       const data = await response.json();
  42 │       setFlashcards(data.flashcards);
  43 │       toast.success('Flashcards generated successfully!');
  44 │     } catch (error) {
  45 │       console.error('Error generating flashcards:', error);
  46 │       toast.error('Failed to generate flashcards');
  47 │     } finally {
  48 │       setLoading(false);
  49 │     }
  50 │   };
  51 │ 
  52 │   return (
  53 │     <div className="min-h-screen flex flex-col">
  54 │       <NavBar />
  55 │       
  56 │       <main className="flex-1">
  57 │         <div className="page-container">
  58 │           <div className="flex flex-col md:flex-row items-start gap-6 mb-8">
  59 │             <div className="md:w-3/5">
  60 │               <h1 className="text-3xl md:text-4xl font-bold mb-2">
  61 │                 <span className="flex items-center gap-2">
  62 │                   <FileText className="text-kid-blue" />
  63 │                   PDF Flashcard Generator
  64 │                 </span>
  65 │               </h1>
  66 │               <p className="text-gray-700 mb-4">
  67 │                 Upload a PDF and get AI-generated flashcards to help you study and memorize the content effectively.
  68 │               </p>
  69 │             </div>
  70 │             <div className="md:w-2/5 bg-kid-blue/10 p-4 rounded-xl border border-kid-blue/20">
  71 │               <div className="flex items-start gap-2">
  72 │                 <HelpCircle className="text-kid-blue mt-1 flex-shrink-0" />
  73 │                 <div>
  74 │                   <h3 className="font-medium text-kid-blue">How it works:</h3>
  75 │                   <p className="text-sm text-gray-600">
  76 │                     Upload your PDF study material, and our AI will analyze it to create targeted flashcards for better learning.
  77 │                   </p>
  78 │                 </div>
  79 │               </div>
  80 │             </div>
  81 │           </div>
  82 │ 
  83 │           <div className="grid md:grid-cols-2 gap-8">
  84 │             <div>
  85 │               <div className="bg-white rounded-xl shadow-sm border p-6">
  86 │                 <form onSubmit={handleSubmit}>
  87 │                   <div className="flex flex-col items-center justify-center border-2 border-dashed border-gray-300 rounded-lg p-8 mb-4">
  88 │                     <Upload className="w-12 h-12 text-gray-400 mb-4" />
  89 │                     <input
  90 │                       type="file"
  91 │                       accept=".pdf"
  92 │                       onChange={handleFileChange}
  93 │                       className="hidden"
  94 │                       id="pdf-upload"
  95 │                     />
  96 │                     <label
  97 │                       htmlFor="pdf-upload"
  98 │                       className="cursor-pointer text-center"
  99 │                     >
 100 │                       <span className="text-kid-blue font-medium">Click to upload</span>
 101 │                       <span className="text-gray-500"> or drag and drop</span>
 102 │                       <p className="text-sm text-gray-500">PDF (max. 10MB)</p>
 103 │                     </label>
 104 │                   </div>
 105 │                   {pdfFile && (
 106 │                     <p className="text-sm text-gray-600 mb-4">
 107 │                       Selected file: {pdfFile.name}
 108 │                     </p>
 109 │                   )}
 110 │                   <button
 111 │                     type="submit"
 112 │                     disabled={!pdfFile || loading}
 113 │                     className={cn(
 114 │                       "w-full py-2 px-4 rounded-lg font-medium transition-colors",
 115 │                       "bg-kid-blue text-white hover:bg-kid-blue/90",
 116 │                       "disabled:bg-gray-300 disabled:cursor-not-allowed"
 117 │                     )}
 118 │                   >
 119 │                     {loading ? 'Generating...' : 'Generate Flashcards'}
 120 │                   </button>
 121 │                 </form>
 122 │               </div>
 123 │             </div>
 124 │ 
 125 │             <div>
 126 │               <div className="bg-white rounded-xl shadow-sm border p-6 h-full">
 127 │                 <h2 className="text-xl font-semibold mb-4">Your Flashcards</h2>
 128 │                 {flashcards.length > 0 ? (
 129 │                   <div className="space-y-4">
 130 │                     {flashcards.map((card, index) => (
 131 │                       <div
 132 │                         key={index}
 133 │                         className="border rounded-lg p-4 hover:shadow-md transition-shadow"
 134 │                       >
 135 │                         <h3 className="font-medium mb-2">Question {index + 1}:</h3>
 136 │                         <p className="text-gray-700 mb-3">{card.question}</p>
 137 │                         <h3 className="font-medium mb-2">Answer:</h3>
 138 │                         <p className="text-gray-700">{card.answer}</p>
 139 │                       </div>
 140 │                     ))}
 141 │                   </div>
 142 │                 ) : (
 143 │                   <p className="text-gray-500 text-center py-8">
 144 │                     Generated flashcards will appear here
 145 │                   </p>
 146 │                 )}
 147 │               </div>
 148 │             </div>
 149 │           </div>
 150 │         </div>
 151 │       </main>
 152 │       
 153 │       <Footer />
 154 │     </div>
 155 │   );
 156 │ };
 157 │ 
 158 │ export default FlashcardsPage;
 159 │ import React, { useState } from 'react';
 160 │ import { FileText } from 'lucide-react';
 161 │ import NavBar from '@/components/NavBar';
 162 │ import Footer from '@/components/Footer';
 163 │ import { Button } from '@/components/ui/button';
 164 │ import { Input } from '@/components/ui/input';
 165 │ 
 166 │ const FlashcardsPage = () => {
     ·       ───────┬──────
     ·              ╰── `FlashcardsPage` redefined here
 167 │   const [file, setFile] = useState<File | null>(null);
 168 │   const [flashcards, setFlashcards] = useState<Array<{ question: string; answer: string }>>([]);
     ╰────
  × the name `default` is exported multiple times
     ╭─[/home/runner/workspace/src/pages/FlashcardsPage.tsx:158:1]
 155 │   );
 156 │ };
 157 │ 
 158 │ export default FlashcardsPage;
     · ───────────────┬──────────────
     ·                ╰── previous exported here
 159 │ import React, { useState } from 'react';
 160 │ import { FileText } from 'lucide-react';
 161 │ import NavBar from '@/components/NavBar';
 162 │ import Footer from '@/components/Footer';
 163 │ import { Button } from '@/components/ui/button';
 164 │ import { Input } from '@/components/ui/input';
 165 │ 
 166 │ const FlashcardsPage = () => {
 167 │   const [file, setFile] = useState<File | null>(null);
 168 │   const [flashcards, setFlashcards] = useState<Array<{ question: string; answer: string }>>([]);
 169 │ 
 170 │   const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
 171 │     if (e.target.files && e.target.files[0]) {
 172 │       setFile(e.target.files[0]);
 173 │     }
 174 │   };
 175 │ 
 176 │   const handleUpload = async () => {
 177 │     if (!file) return;
 178 │     // TODO: Implement PDF processing logic here
 179 │     // For now, just show a sample flashcard
 180 │     setFlashcards([
 181 │       { question: "Sample Question", answer: "Sample Answer" }
 182 │     ]);
 183 │   };
 184 │ 
 185 │   return (
 186 │     <div className="min-h-screen flex flex-col">
 187 │       <NavBar />
 188 │       
 189 │       <main className="flex-1">
 190 │         <div className="page-container">
 191 │           <div className="mb-8">
 192 │             <h1 className="text-3xl md:text-4xl font-bold">
 193 │               <span className="flex items-center gap-2">
 194 │                 <FileText className="text-kid-green" />
 195 │                 PDF Flashcards Generator
 196 │               </span>
 197 │             </h1>
 198 │           </div>
 199 │ 
 200 │           <div className="max-w-xl mx-auto">
 201 │             <div className="bg-white p-6 rounded-lg shadow-md">
 202 │               <Input
 203 │                 type="file"
 204 │                 accept=".pdf"
 205 │                 onChange={handleFileChange}
 206 │                 className="mb-4"
 207 │               />
 208 │               <Button 
 209 │                 onClick={handleUpload}
 210 │                 className="w-full bg-kid-green hover:bg-kid-green/90"
 211 │                 disabled={!file}
 212 │               >
 213 │                 Generate Flashcards
 214 │               </Button>
 215 │             </div>
 216 │ 
 217 │             {flashcards.length > 0 && (
 218 │               <div className="mt-8 space-y-4">
 219 │                 {flashcards.map((card, index) => (
 220 │                   <div key={index} className="bg-white p-4 rounded-lg shadow-md">
 221 │                     <h3 className="font-semibold">Question:</h3>
 222 │                     <p className="mb-2">{card.question}</p>
 223 │                     <h3 className="font-semibold">Answer:</h3>
 224 │                     <p>{card.answer}</p>
 225 │                   </div>
 226 │                 ))}
 227 │               </div>
 228 │             )}
 229 │           </div>
 230 │         </div>
 231 │       </main>
 232 │ 
 233 │       <Footer />
 234 │     </div>
 235 │   );
 236 │ };
 237 │ 
 238 │ export default FlashcardsPage;
     · ───────────────┬──────────────
     ·                ╰── exported more than once
     ╰────

Advice:   ☞ Exported identifiers must be unique
/home/runner/workspace/src/pages/FlashcardsPage.tsx:2:1
1  |  
2  |  import React, { useState } from 'react';
   |            ^
3  |  import { NavBar } from '@/components/NavBar';
4  |  import { Footer } from '@/components/Footer';
Click outside, press Esc key, or fix the code to dismiss.
You can also disable this overlay by setting server.hmr.overlay to false in vite.config.ts.